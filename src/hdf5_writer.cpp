/*
  ____  _       _            _             _       
 / ___|(_)_ __ | | __  _ __ | |_   _  __ _(_)_ __  
 \___ \| | '_ \| |/ / | '_ \| | | | |/ _` | | '_ \ 
  ___) | | | | |   <  | |_) | | |_| | (_| | | | | |
 |____/|_|_| |_|_|\_\ | .__/|_|\__,_|\__, |_|_| |_|
                      |_|            |___/         
# A Template for Hdf5Plugin, a Sink Plugin
# Generated by the command: plugin --type sink --dir hdf5_plugin --install-dir /Users/p4010/usr/local HDF5
# Hostname: Fram-IV-2.local
# Current working directory: /Users/p4010/Develop/MADS_plugins
# Creation date: 2025-07-09T12:52:15.976+0200
# NOTICE: MADS Version 1.3.1
*/

// Mandatory included headers
#include <sink.hpp>
#include <nlohmann/json.hpp>
#include <pugg/Kernel.h>
#include <H5Cpp.h>
#include <sstream>
#include "json2hdf5.hpp"
// other includes as needed here

// Define the name of the plugin
#ifndef PLUGIN_NAME
#define PLUGIN_NAME "hdf5"
#endif

// Load the namespaces
using namespace std;
using json = nlohmann::json;


// Plugin class. This shall be the only part that needs to be modified,
// implementing the actual functionality
class Hdf5Plugin : public Sink<json> {

public:
  ~Hdf5Plugin() {
    // Constructor implementation, if needed
    try {
      _converter.close();
    } catch (const H5::Exception &e) {
      _error = "Error closing HDF5 file: " + string(e.getDetailMsg());
    }
  }

  // Typically, no need to change this
  string kind() override { return PLUGIN_NAME; }

  // Implement the actual functionality here
  return_type load_data(json const &input, string topic = "") override {
    try {
      _converter.save_to_group(input, topic);
    } catch (const std::exception &e) {
      _error = "Error converting JSON to HDF5: " + string(e.what());
      return return_type::warning;
    } 
    return return_type::success;
  }

  void set_params(void const *params) override { 
    // Call the parent class method to set the common parameters 
    // (e.g. agent_id, etc.)
    Sink::set_params(params);

    // provide sensible defaults for the parameters by setting e.g.
    _params["filename"] = "mads_log.h5";
    _params["keypath_sep"] = "."; // Default keypath separator
    // then merge the defaults with the actually provided parameters
    // params needs to be cast to json
    _params.merge_patch(*(json *)params);

    _converter.open(_params["filename"].get<string>());
    _converter.set_keypath_separator(_params["keypath_sep"].get<string>());
    for (const auto &keypath : _params["keypaths"]) {
      _converter.append_keypath(keypath.get<string>());
    }
  }

  // Implement this method if you want to provide additional information
  map<string, string> info() override { 
    // return a map of strings with additional information about the plugin
    // it is used to print the information about the plugin when it is loaded
    // by the agent
    map<string, string> info_map;
    info_map["File name"] = _params["filename"];
    stringstream ss;
    for (const auto &keypath : _converter.keypaths()) {
      ss << keypath << ", ";
    }
    if (!ss.str().empty()) {
      ss.seekp(-2, ss.cur); // Remove the last comma and space
    }
    ss << " (total: " << _converter.keypaths().size() << ")";
    info_map["Keypaths"] = ss.str();
    info_map["Keypath sep."] = _converter.keypath_separator();
    return info_map;
  };

private:
  // Define the fields that are used to store internal resources
  JsonToHdf5Converter _converter; // Converter for JSON to HDF5
};



/*
  ____  _             _             _      _                
 |  _ \| |_   _  __ _(_)_ __     __| |_ __(_)_   _____ _ __ 
 | |_) | | | | |/ _` | | '_ \   / _` | '__| \ \ / / _ \ '__|
 |  __/| | |_| | (_| | | | | | | (_| | |  | |\ V /  __/ |   
 |_|   |_|\__,_|\__, |_|_| |_|  \__,_|_|  |_| \_/ \___|_|   
                |___/                                      
Enable the class as plugin 
*/
INSTALL_SINK_DRIVER(Hdf5Plugin, json)


/*
                  _
  _ __ ___   __ _(_)_ __
 | '_ ` _ \ / _` | | '_ \
 | | | | | | (_| | | | | |
 |_| |_| |_|\__,_|_|_| |_|

For testing purposes, when directly executing the plugin
*/
int main(int argc, char const *argv[]) {
  Hdf5Plugin plugin;
  json input, params;

  // Initialize the input data
  input = {
    {"timecode", 1234567890},
    {"timestamp", "2025-07-09T12:52:15.976+0200"},
    {"hostname", "Fram-IV.local"},
    {"data", {
      {"key1", "value1"}, 
      {"key2", 42}, 
      {"key3", {1, 2, 3, 4, 5}},
      {"key4", {{"subkey1", "subvalue1"}, {"subkey2", "subvalue2"}}}
    }}
  };

  // Set example values to params
  params["filename"] = "validation_test.h5";
  params["keypaths"] = {
    "data.key1", "data.key2", "data.key3", "data.key4.subkey1", "data.key4.subkey2"};

  // Set the parameters
  plugin.set_params(&params);

  for (const auto &info : plugin.info()) {
    cout << info.first << ": " << info.second << endl;
  }

  // Process data
  if (plugin.load_data(input, "test_topic") != return_type::success) {
    cerr << "Error: " << plugin.error() << endl;
    return 1;
  }

  return 0;
}
